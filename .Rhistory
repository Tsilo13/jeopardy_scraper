long_format$time <- as.numeric(long_format$time)
write.csv(long_format, "data/seasonal_charts/theme_word_race_long.csv", row.names = FALSE)
# in case the web app wont detect the time column
# Export the long-format version
# Clean and re-export your animation-ready file
final_race_data <- long_format %>%
filter(!is.na(time), !is.na(label), !is.na(value)) %>%  # remove ghost rows
filter(value > 0) %>%                                   # remove inactive rows
arrange(time, desc(value))                              # nice ordering
write.csv(final_race_data, "data/seasonal_charts/theme_word_race_clean.csv", row.names = FALSE)
season_cats <- dbGetQuery(con, "
SELECT g.SEASON, c.CATEGORY_NAME
FROM GAMES g
JOIN CATEGORIES c ON g.GAME_ID = c.GAME_ID
")
season_words <- season_cats %>%
unnest_tokens(word, CATEGORY_NAME) %>%
filter(!word %in% stop_words$word) %>%
count(SEASON, word, sort = TRUE)
top20 <- season_words %>%
group_by(SEASON) %>%
slice_max(n, n = 20) %>%
ungroup()
word_matrix <- top20 %>%
pivot_wider(
names_from = word,
values_from = n,
values_fill = list(n = 0)
) %>%
arrange(as.numeric(SEASON))
write.csv(word_matrix, "data/seasonal_charts/theme_word_race.csv", row.names = FALSE)
#in case the barchart race animator tool needs long format (i.e Flourish.studio)
long_format <- word_matrix %>%
pivot_longer(
cols = -SEASON,        # Use all columns except SEASON
names_to = "label",    # New column for the theme word
values_to = "value"    # New column for frequency
) %>%
rename(time = SEASON)    # Rename SEASON to 'time' for Flourish
long_format$time <- as.numeric(long_format$time)
write.csv(long_format, "data/seasonal_charts/theme_word_race_long.csv", row.names = FALSE)
# in case the web app wont detect the time column
# Export the long-format version
# Clean and re-export your animation-ready file
final_race_data <- long_format %>%
filter(!is.na(time), !is.na(label), !is.na(value)) %>%  # remove ghost rows
filter(value > 0) %>%                                   # remove inactive rows
arrange(time, desc(value))                              # nice ordering
mutate(
date = ymd("2000-01-01") + years(time - 1)  # fake date for each season
)
library(lubridate)# for custom date time for the bar chart race
install.packages("lubridate")
library(lubridate)
season_cats <- dbGetQuery(con, "
SELECT g.SEASON, c.CATEGORY_NAME
FROM GAMES g
JOIN CATEGORIES c ON g.GAME_ID = c.GAME_ID
")
season_words <- season_cats %>%
unnest_tokens(word, CATEGORY_NAME) %>%
filter(!word %in% stop_words$word) %>%
count(SEASON, word, sort = TRUE)
top20 <- season_words %>%
group_by(SEASON) %>%
slice_max(n, n = 20) %>%
ungroup()
word_matrix <- top20 %>%
pivot_wider(
names_from = word,
values_from = n,
values_fill = list(n = 0)
) %>%
arrange(as.numeric(SEASON))
write.csv(word_matrix, "data/seasonal_charts/theme_word_race.csv", row.names = FALSE)
#in case the barchart race animator tool needs long format (i.e Flourish.studio)
long_format <- word_matrix %>%
pivot_longer(
cols = -SEASON,        # Use all columns except SEASON
names_to = "label",    # New column for the theme word
values_to = "value"    # New column for frequency
) %>%
rename(time = SEASON)    # Rename SEASON to 'time' for Flourish
long_format$time <- as.numeric(long_format$time)
write.csv(long_format, "data/seasonal_charts/theme_word_race_long.csv", row.names = FALSE)
# in case the web app wont detect the time column
# Export the long-format version
# Clean and re-export your animation-ready file
final_race_data <- long_format %>%
filter(!is.na(time), !is.na(label), !is.na(value)) %>%  # remove ghost rows
filter(value > 0) %>%                                   # remove inactive rows
arrange(time, desc(value))                              # nice ordering
mutate(
date = ymd("2000-01-01") + years(time - 1)  # fake date for each season
)
season_cats <- dbGetQuery(con, "
SELECT g.SEASON, g.AIR_DATE, c.CATEGORY_NAME
FROM GAMES g
JOIN CATEGORIES c ON g.GAME_ID = c.GAME_ID
")
# Reduce to 1 AIR_DATE per SEASON (first show of season)
season_dates <- season_cats %>%
group_by(SEASON) %>%
summarise(first_air_date = min(AIR_DATE, na.rm = TRUE))
# Tokenize and clean category names
season_words <- season_cats %>%
unnest_tokens(word, CATEGORY_NAME) %>%
filter(!word %in% stop_words$word) %>%
count(SEASON, word, sort = TRUE)
# Top 20 words per season
top20 <- season_words %>%
group_by(SEASON) %>%
slice_max(n, n = 20) %>%
ungroup()
# Merge in the first AIR_DATE for ordering
top20 <- top20 %>%
left_join(season_dates, by = "SEASON") %>%
arrange(first_air_date)
# Final long-format structure
long_format <- top20 %>%
rename(label = word, value = n, time = first_air_date) %>%
filter(!is.na(time), !is.na(label), !is.na(value)) %>%
filter(value > 0) %>%
arrange(time, desc(value))
#save it to a csv
write.csv(long_format, "data/seasonal_charts/theme_word_race_real_seasonal.csv", row.names = FALSE)
season_cats <- dbGetQuery(con, "
SELECT g.SEASON, g.AIR_DATE, c.CATEGORY_NAME
FROM GAMES g
JOIN CATEGORIES c ON g.GAME_ID = c.GAME_ID
")
# Reduce to 1 AIR_DATE per SEASON (first show of season)
season_dates <- season_cats %>%
group_by(SEASON) %>%
summarise(first_air_date = min(AIR_DATE, na.rm = TRUE))
# Tokenize and clean category names
season_words <- season_cats %>%
unnest_tokens(word, CATEGORY_NAME) %>%
filter(!word %in% stop_words$word) %>%
count(SEASON, word, sort = TRUE)
# Top 20 words per season
top20 <- season_words %>%
group_by(SEASON) %>%
slice_max(n, n = 20) %>%
ungroup()
# Merge in the first AIR_DATE for ordering
top20 <- top20 %>%
left_join(season_dates, by = "SEASON") %>%
arrange(first_air_date)
# Final long-format structure
# Reorder: put 'time' (first_air_date) first, keep SEASON last (optional)
long_format <- top20 %>%
left_join(season_dates, by = "SEASON") %>%
arrange(first_air_date) %>%
rename(label = word, value = n, time = first_air_date) %>%
filter(!is.na(time), !is.na(label), !is.na(value)) %>%
filter(value > 0) %>%
arrange(time, desc(value)) %>%
select(time, label, value)  # drop SEASON or move it if needed
season_cats <- dbGetQuery(con, "
SELECT g.SEASON, g.AIR_DATE, c.CATEGORY_NAME
FROM GAMES g
JOIN CATEGORIES c ON g.GAME_ID = c.GAME_ID
")
# Reduce to 1 AIR_DATE per SEASON (first show of season)
season_dates <- season_cats %>%
group_by(SEASON) %>%
summarise(first_air_date = min(AIR_DATE, na.rm = TRUE))
# Tokenize and clean category names
season_words <- season_cats %>%
unnest_tokens(word, CATEGORY_NAME) %>%
filter(!word %in% stop_words$word) %>%
count(SEASON, word, sort = TRUE)
# Top 20 words per season
top20 <- season_words %>%
group_by(SEASON) %>%
slice_max(n, n = 20) %>%
ungroup()
# Merge in the first AIR_DATE for ordering
top20 <- top20 %>%
left_join(season_dates, by = "SEASON") %>%
arrange(first_air_date)
# Final long-format structure
# Reorder: put 'time' (first_air_date) first, keep SEASON last (optional)
long_format <- top20 %>%
left_join(season_dates, by = "SEASON") %>%
filter(!is.na(word), !is.na(n), !is.na(first_air_date)) %>%
filter(n > 0) %>%
rename(label = word, value = n, time = first_air_date) %>%
arrange(time, desc(value)) %>%
select(time, label, value)  # clean order for AlienArt
season_cats <- dbGetQuery(con, "
SELECT g.SEASON, g.AIR_DATE, c.CATEGORY_NAME
FROM GAMES g
JOIN CATEGORIES c ON g.GAME_ID = c.GAME_ID
")
# Reduce to 1 AIR_DATE per SEASON (first show of season)
season_dates <- season_cats %>%
group_by(SEASON) %>%
summarise(first_air_date = min(AIR_DATE, na.rm = TRUE))
# Tokenize and clean category names
season_words <- season_cats %>%
unnest_tokens(word, CATEGORY_NAME) %>%
filter(!word %in% stop_words$word) %>%
count(SEASON, word, sort = TRUE)
# Top 20 words per season
top20 <- season_words %>%
group_by(SEASON) %>%
slice_max(n, n = 20) %>%
ungroup()
# Merge in the first AIR_DATE for ordering
top20 <- top20 %>%
left_join(season_dates, by = "SEASON") %>%
arrange(first_air_date)
# Final long-format structure
# Reorder: put 'time' (first_air_date) first, keep SEASON last (optional)
long_format <- top20 %>%
left_join(season_dates, by = "SEASON") %>%
filter(!is.na(word), !is.na(n)) %>%                # clean word + count
filter(!is.na(first_air_date), n > 0) %>%          # ensure valid date + nonzero count
rename(label = word, value = n, time = first_air_date) %>%  # rename for AlienArt
arrange(time, desc(value)) %>%
select(time, label, value)
season_cats <- dbGetQuery(con, "
SELECT g.SEASON, g.AIR_DATE, c.CATEGORY_NAME
FROM GAMES g
JOIN CATEGORIES c ON g.GAME_ID = c.GAME_ID
")
# Reduce to 1 AIR_DATE per SEASON (first show of season)
season_dates <- season_cats %>%
group_by(SEASON) %>%
summarise(first_air_date = min(AIR_DATE, na.rm = TRUE))
# Tokenize and clean category names
season_words <- season_cats %>%
unnest_tokens(word, CATEGORY_NAME) %>%
filter(!word %in% stop_words$word) %>%
count(SEASON, word, sort = TRUE)
# Top 20 words per season
top20 <- season_words %>%
group_by(SEASON) %>%
slice_max(n, n = 20) %>%
ungroup()
# Merge in the first AIR_DATE for ordering
top20 <- top20 %>%
left_join(season_dates, by = "SEASON") %>%
arrange(first_air_date)
# Final long-format structure
# Reorder: put 'time' (first_air_date) first, keep SEASON last (optional)
long_format <- top20 %>%
left_join(season_dates, by = "SEASON") %>%
rename(label = word, value = n, time = first_air_date) %>%
filter(!is.na(time), value > 0) %>%
arrange(time, desc(value)) %>%
select(time, label, value)
season_cats <- dbGetQuery(con, "
SELECT g.SEASON, g.AIR_DATE, c.CATEGORY_NAME
FROM GAMES g
JOIN CATEGORIES c ON g.GAME_ID = c.GAME_ID
")
# Reduce to 1 AIR_DATE per SEASON (first show of season)
season_dates <- season_cats %>%
group_by(SEASON) %>%
summarise(first_air_date = min(AIR_DATE, na.rm = TRUE))
# Tokenize and clean category names
season_words <- season_cats %>%
unnest_tokens(word, CATEGORY_NAME) %>%
filter(!word %in% stop_words$word) %>%
count(SEASON, word, sort = TRUE)
# Top 20 words per season
top20 <- season_words %>%
group_by(SEASON) %>%
slice_max(n, n = 20) %>%
ungroup() %>%
left_join(season_dates, by = "SEASON")  # ✅ JOIN HERE ONLY
# Final long-format structure
long_format <- top20 %>%
rename(label = word, value = n, time = first_air_date) %>%
filter(!is.na(time), value > 0) %>%
arrange(time, desc(value)) %>%
select(time, label, value)
# Save to CSV
write.csv(long_format, "data/seasonal_charts/theme_word_race_real_seasonal.csv", row.names = FALSE)
season_cats <- dbGetQuery(con, "
SELECT g.SEASON, g.AIR_DATE, c.CATEGORY_NAME
FROM GAMES g
JOIN CATEGORIES c ON g.GAME_ID = c.GAME_ID
")
# Reduce to 1 AIR_DATE per SEASON (first show of season)
season_dates <- season_cats %>%
group_by(SEASON) %>%
summarise(first_air_date = min(AIR_DATE, na.rm = TRUE))
# Tokenize and clean category names
season_words <- season_cats %>%
unnest_tokens(word, CATEGORY_NAME) %>%
filter(!word %in% stop_words$word) %>%
count(SEASON, word, sort = TRUE)
# Top 20 words per season
top20 <- season_words %>%
group_by(SEASON) %>%
slice_max(n, n = 20) %>%
ungroup() %>%
left_join(season_dates, by = "SEASON")  # ✅ JOIN HERE ONLY
# Final long-format structure
long_format <- top20 %>%
rename(label = word, value = n, time = first_air_date) %>%
filter(!is.na(time), value > 0) %>%
arrange(time, desc(value)) %>%
select(time, label, value)
# Save to CSV
write.csv(long_format, "data/seasonal_charts/theme_word_race_real_seasonal.csv", row.names = FALSE)
sample <- long_format %>%
filter(time <= as.Date("1986-09-08"))  # first 3 seasons or so
write.csv(sample, "theme_word_race_sample.csv", row.names = FALSE, quote = FALSE)
sample <- long_format %>%
filter(time <= as.Date("1986-09-08"))  # first 3 seasons or so
write.csv(sample, "data/seasonal_charts/theme_word_race_sample.csv", row.names = FALSE, quote = FALSE)
season_cats <- dbGetQuery(con, "
SELECT g.SEASON, g.AIR_DATE, c.CATEGORY_NAME
FROM GAMES g
JOIN CATEGORIES c ON g.GAME_ID = c.GAME_ID
")
# Reduce to 1 AIR_DATE per SEASON (first show of season)
season_dates <- season_cats %>%
group_by(SEASON) %>%
summarise(first_air_date = min(AIR_DATE, na.rm = TRUE))
# Tokenize and clean category names
season_words <- season_cats %>%
unnest_tokens(word, CATEGORY_NAME) %>%
filter(!word %in% stop_words$word) %>%
count(SEASON, word, sort = TRUE)
# Top 20 words per season
top20 <- season_words %>%
group_by(SEASON) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
left_join(season_dates, by = "SEASON")  # ✅ JOIN HERE ONLY
# Final long-format structure
long_format <- top20 %>%
rename(label = word, value = n, time = first_air_date) %>%
filter(!is.na(time), value > 0) %>%
arrange(time, desc(value)) %>%
select(time, label, value)
# Save to CSV
write.csv(long_format, "data/seasonal_charts/theme_word_race_real_seasonal.csv", row.names = FALSE)
sample <- long_format %>%
filter(time <= as.Date("1986-09-08"))  # first 3 seasons or so
write.csv(sample, "data/seasonal_charts/theme_word_race_sample.csv", row.names = FALSE, quote = FALSE)
season_cats <- dbGetQuery(con, "
SELECT g.SEASON, g.AIR_DATE, c.CATEGORY_NAME
FROM GAMES g
JOIN CATEGORIES c ON g.GAME_ID = c.GAME_ID
")
# Reduce to 1 AIR_DATE per SEASON (first show of season)
# Get first AIR_DATE per season
season_dates <- season_cats %>%
group_by(SEASON) %>%
summarise(time = min(AIR_DATE, na.rm = TRUE))
# Get top 10 words per season
top10 <- season_words %>%
group_by(SEASON) %>%
slice_max(n, n = 10) %>%
ungroup()
# Join dates
top10 <- top10 %>%
left_join(season_dates, by = "SEASON")
# Pivot to wide format
wide_format <- top10 %>%
select(time, word, n) %>%
pivot_wider(
names_from = word,
values_from = n,
values_fill = list(n = 0)
) %>%
arrange(time)
season_cats <- dbGetQuery(con, "
SELECT g.SEASON, g.AIR_DATE, c.CATEGORY_NAME
FROM GAMES g
JOIN CATEGORIES c ON g.GAME_ID = c.GAME_ID
")
# Reduce to 1 AIR_DATE per SEASON (first show of season)
# Get first AIR_DATE per season
season_dates <- season_cats %>%
group_by(SEASON) %>%
summarise(time = min(AIR_DATE, na.rm = TRUE))
# Tokenize category names and count words
season_words <- season_cats %>%
unnest_tokens(word, CATEGORY_NAME) %>%
filter(!word %in% stop_words$word) %>%
count(SEASON, word, sort = TRUE)
# Top 10 words per season
top10 <- season_words %>%
group_by(SEASON) %>%
slice_max(n, n = 10) %>%
ungroup()
top10 <- top10 %>%
left_join(season_dates, by = "SEASON")
# Pivot to wide format
wide_format <- top10 %>%
select(time, word, n) %>%
pivot_wider(
names_from = word,
values_from = n,
values_fill = list(n = 0)
) %>%
arrange(time)
season_cats <- dbGetQuery(con, "
SELECT g.SEASON, g.AIR_DATE, c.CATEGORY_NAME
FROM GAMES g
JOIN CATEGORIES c ON g.GAME_ID = c.GAME_ID
")
# Reduce to 1 AIR_DATE per SEASON (first show of season)
# Get first AIR_DATE per season
season_dates <- season_cats %>%
group_by(SEASON) %>%
summarise(time = min(AIR_DATE, na.rm = TRUE))
# Tokenize category names and count words
season_words <- season_cats %>%
unnest_tokens(word, CATEGORY_NAME) %>%
filter(!word %in% stop_words$word) %>%
count(SEASON, word, sort = TRUE)
# Top 10 words per season
top10 <- season_words %>%
group_by(SEASON) %>%
slice_max(n, n = 10) %>%
ungroup()
top10 <- top10 %>%
left_join(season_dates, by = "SEASON")
# Pivot to wide format
wide_format <- top10 %>%
rename(date = time) %>%
select(date, word, n) %>%
pivot_wider(
names_from = word,
values_from = n,
values_fill = list(n = 0)
) %>%
arrange(date)
# Optional: add a season label for captions
wide_format$season_label <- paste("Season", 1:nrow(wide_format))
# Save
write.csv(wide_format, "data/seasonal_charts/theme_word_race_wide.csv", row.names = FALSE)
season_cats <- dbGetQuery(con, "
SELECT g.SEASON, g.AIR_DATE, c.CATEGORY_NAME
FROM GAMES g
JOIN CATEGORIES c ON g.GAME_ID = c.GAME_ID
")
# Reduce to 1 AIR_DATE per SEASON (first show of season)
# Get first AIR_DATE per season
season_dates <- season_cats %>%
group_by(SEASON) %>%
summarise(time = min(AIR_DATE, na.rm = TRUE))
# Tokenize category names and count words
season_words <- season_cats %>%
unnest_tokens(word, CATEGORY_NAME) %>%
filter(!word %in% stop_words$word) %>%
count(SEASON, word, sort = TRUE)
# Top 10 words per season
top10 <- season_words %>%
group_by(SEASON) %>%
slice_max(n, n = 10) %>%
ungroup()
top10 <- top10 %>%
left_join(season_dates, by = "SEASON")
# Pivot to wide format
wide_format <- top10 %>%
rename(date = time) %>%
select(date, word, n) %>%
pivot_wider(
names_from = word,
values_from = n,
values_fill = list(n = 0)
) %>%
arrange(date)
# Optional: add a season label for captions
wide_format$season_label <- paste("Season", 1:nrow(wide_format))
# Save
write.csv(wide_format, "data/seasonal_charts/theme_word_race_wide.csv", row.names = FALSE)
season_cats <- dbGetQuery(con, "
SELECT g.SEASON, g.AIR_DATE, c.CATEGORY_NAME
FROM GAMES g
JOIN CATEGORIES c ON g.GAME_ID = c.GAME_ID
")
# Reduce to 1 AIR_DATE per SEASON (first show of season)
# Get first AIR_DATE per season
season_dates <- season_cats %>%
group_by(SEASON) %>%
summarise(time = min(AIR_DATE, na.rm = TRUE))
# Tokenize category names and count words
season_words <- season_cats %>%
unnest_tokens(word, CATEGORY_NAME) %>%
filter(!word %in% stop_words$word) %>%
count(SEASON, word, sort = TRUE)
# Top 10 words per season
top10 <- season_words %>%
group_by(SEASON) %>%
slice_max(n, n = 10) %>%
ungroup()
top10 <- top10 %>%
left_join(season_dates, by = "SEASON")
# Pivot to wide format
wide_format <- top10 %>%
rename(date = time) %>%
select(date, word, n) %>%
pivot_wider(
names_from = word,
values_from = n,
values_fill = list(n = 0)
) %>%
arrange(date)
# Save
write.csv(wide_format, "data/seasonal_charts/theme_word_race_wide.csv", row.names = FALSE)
dbDisconnect(con)
